{"version":3,"sources":["pages/homepage.js","useLocalStorage.js","pages/page1.js","components/usercomponent.js","pages/page2.js","pages/page3.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","href","useLocalStorage","localStorageKey","defaultValue","React","useState","localStorage","getItem","value","setValue","useEffect","setItem","Page1","title","setTitle","type","onChange","event","target","UserComponent","props","name","age","useStyles","makeStyles","heading","backgroundColor","color","transform","padding","Page2","JSON","parse","data","s","mapped_users","map","user","idx","key","className","length","to","Page3","setName","setAge","placeholder","onClick","temp_data","push","stringify","alert","footer","position","left","bottom","width","display","justifyContent","links","Menu","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cdfa793.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <div>\r\n\r\n      <pre>{`\r\n            Welcome,\r\n\r\n            This sample app uses react-router-dom to navigate between pages\r\n            and localStorage to handle data between components. LocalStorage\r\n            is a simple but maybe sufficient solution to demonstrate the interface.\r\n\r\n            Navigation details:\r\n            See App.js for route definitions. The user is redirected with Link\r\n            components from the Menu component. Components corresponding to\r\n            whole pages are in the /pages folder and small components in the\r\n            /components folder and are imported where needed.\r\n\r\n            LocalStorage details:\r\n            The React Hook function in useLocalStorage.js makes the state respond\r\n            to changes and re-render like a normal state hook. Saving a value to\r\n            localStorage, it is available from anywhere, see example at page 1 and 2.\r\n            Objects need to be stored as JSON strings, thus the stringify and\r\n            parse. See example at page 3 and 2.\r\n\r\n            Other:\r\n            For style, the npm package @material-ui/core is used. Each component\r\n            has a style object created with makeStyles to keep the CSS straightforward\r\n\r\n          `}  <a href=\"https://github.com/SaraOlsson/react-data-routing/tree/master/react-with-local-storage\">Source code on GitHub</a>\r\n              {`\\n            `}\r\n              <a href=\"https://www.robinwieruch.de/local-storage-react\">Local Storage in React</a>\r\n              {`\\n            `}\r\n              <a href=\"https://reactploj-redux.netlify.com/\">Same project but with React-Redux for data management</a></pre>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nconst useLocalStorage = (localStorageKey, defaultValue) => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || defaultValue\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n  return [value, setValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React from 'react';\r\nimport useLocalStorage from '../useLocalStorage';\r\n\r\nconst Page1 = () => {\r\n  const [title, setTitle] = useLocalStorage('myValueInLocalStorage', '');\r\n\r\n  const onChange = event => setTitle(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 1</h1>\r\n      <p>Enter something, then have a look at page 2..</p>\r\n      <input value={title} type=\"text\" onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page1;\r\n","import React from 'react';\r\n\r\nconst UserComponent = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <h3>User: {props.name} - age: {props.age}</h3>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default UserComponent;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport useLocalStorage from '../useLocalStorage';\r\nimport UserComponent from '../components/usercomponent';\r\n\r\nconst Page2 = () => {\r\n\r\n  const [title, setTitle] = useLocalStorage('myValueInLocalStorage', '');\r\n  const [data, setData] = React.useState(JSON.parse(localStorage.getItem('storeObj')) || [] ); // loaded data or empty array\r\n  const s = useStyles();\r\n\r\n  let mapped_users = data.map((user, idx) => <UserComponent name={user.name} key={idx} age={user.age} />);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 2</h1>\r\n\r\n      <span className={s.heading}>value set at page 1</span>\r\n      {title.length > 0 ? <p>{title}</p> : <Link to=\"/page1\"><p> go there and enter something! </p></Link> }\r\n\r\n      <span className={s.heading}> users added at page 3 </span>\r\n      {\r\n        data.length > 0 ? <div>{mapped_users}</div> : <Link to=\"/page3\"><p> go there and enter users! </p></Link>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  heading: {\r\n    backgroundColor: 'teal',\r\n    color: 'white',\r\n    transform: 'rotate(45deg)',\r\n    padding: '5px'\r\n  }\r\n});\r\n\r\nexport default Page2;\r\n","import React from 'react';\r\n\r\nconst Page3 = () => {\r\n\r\n  const [name, setName] = React.useState('');\r\n  const [age, setAge] = React.useState('');\r\n\r\n  const onChangeName = event => setName(event.target.value);\r\n  const onChangeAge = event => setAge(event.target.value);\r\n\r\n  const onAdd = () => {\r\n\r\n      let temp_data = JSON.parse(localStorage.getItem('storeObj')) || [];\r\n      temp_data.push({name: name, age: age});\r\n      localStorage.setItem('storeObj', JSON.stringify(temp_data));\r\n      alert(\"added user\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 3</h1>\r\n\r\n      <p>Enter user info, then have a look at page 2..</p>\r\n      <input value={name} placeholder=\"name\" type=\"text\" onChange={onChangeName} />\r\n      <input value={age} placeholder=\"age\" type=\"text\" onChange={onChangeAge} />\r\n      <button onClick={onAdd}>Add</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page3;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst Menu = () => {\r\n\r\n   const s = useStyles();\r\n\r\n    return (\r\n      <div className={s.footer}>\r\n        <Link to=\"/\" className={s.links}>Homepage</Link>\r\n        <Link to=\"/page1\" className={s.links}>Page 1</Link>\r\n        <Link to=\"/page2\" className={s.links}>Page 2</Link>\r\n        <Link to=\"/page3\" className={s.links}>Page 3</Link>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n\r\n  footer: {\r\n    backgroundColor: 'teal',\r\n    position: 'fixed',\r\n    left: 0,\r\n    bottom: 0,\r\n    width: 100 + '%',\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n    padding: 50 + 'px 0'\r\n  },\r\n  links: {\r\n    color: 'white'\r\n  }\r\n});\r\n\r\nexport default Menu;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\n// import our component\nimport HomePage from './pages/homepage';\nimport Page1 from './pages/page1';\nimport Page2 from './pages/page2';\nimport Page3 from './pages/page3';\nimport Menu from './components/menu';\n\n// main component of app is always one page (depending on url path) + Menu below\nconst App = () => {\n\n  return (\n\n    <Router>\n\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/page1\" component={Page1} />\n        <Route path=\"/page2\" component={Page2} />\n        <Route path=\"/page3\" component={Page3} />\n      </Switch>\n\n      <Menu/>\n\n    </Router>\n\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}