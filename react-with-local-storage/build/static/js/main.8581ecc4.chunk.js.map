{"version":3,"sources":["useLocalStorage.js","pages/homepage.js","pages/page1.js","pages/page2.js","App.js","serviceWorker.js","index.js"],"names":["useStateWithLocalStorage","localStorageKey","React","useState","localStorage","getItem","value","setValue","useEffect","setItem","HomePage","Page1","useLocalStorage","title","setTitle","type","onChange","event","target","Page2","Menu","s","useStyles","className","footer","to","links","makeStyles","body","padding","backgroundColor","position","left","bottom","width","display","justifyContent","color","flexBasis","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAeeA,EAbkB,SAAAC,GAAoB,IAAD,EACxBC,IAAMC,SAC9BC,aAAaC,QAAQJ,IAAoB,IAFO,mBAC3CK,EAD2C,KACpCC,EADoC,KAUlD,OAHAL,IAAMM,WAAU,WACdJ,aAAaK,QAAQR,EAAiBK,KACrC,CAACA,IACG,CAACA,EAAOC,ICCFG,EAVE,WAEf,OACE,6BACE,yCCUSC,EAdD,WAAO,IAAD,EACQC,EAAgB,yBADxB,mBACXC,EADW,KACJC,EADI,KAKlB,OACE,6BACE,sCACA,2BAAOR,MAAOO,EAAOE,KAAK,OAAOC,SALpB,SAAAC,GAAK,OAAIH,EAASG,EAAMC,OAAOZ,UAM5C,2BAAIO,KCKKM,EAdD,WAAO,IAAD,EACQP,EAAgB,yBADxB,mBACXC,EADW,KACJC,EADI,KAKlB,OACE,6BACE,sCACA,2BAAOR,MAAOO,EAAOE,KAAK,OAAOC,SALpB,SAAAC,GAAK,OAAIH,EAASG,EAAMC,OAAOZ,UAM5C,2BAAIO,KCDJO,EAAO,WAEV,IAAMC,EAAIC,IAET,OACE,yBAAKC,UAAWF,EAAEG,QAChB,kBAAC,IAAD,CAAMC,GAAG,IAAIF,UAAWF,EAAEK,OAA1B,YACA,kBAAC,IAAD,CAAMD,GAAG,SAASF,UAAWF,EAAEK,OAA/B,UACA,kBAAC,IAAD,CAAMD,GAAG,SAASF,UAAWF,EAAEK,OAA/B,YAwBFJ,EAAYK,YAAW,CAC3BC,KAAM,CACJC,QAAS,IAEXL,OAAQ,CACNM,gBAAiB,OACjBC,SAAU,QACVC,KAAM,EACNC,OAAQ,EACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBP,QAAS,QAEXH,MAAO,CACLW,MAAO,QACPC,UAAW,UAIAC,EAvCH,WAEV,OAEE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,SAASC,UAAW/B,IAChC,kBAAC,IAAD,CAAO8B,KAAK,SAASC,UAAWvB,KAGlC,kBAAC,EAAD,QCxBcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8581ecc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst useStateWithLocalStorage = localStorageKey => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || ''\r\n  );\r\n\r\n  //console.log(\"useStateWithLocalStorage..\")\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n  return [value, setValue];\r\n};\r\n\r\nexport default useStateWithLocalStorage;\r\n","import React from 'react';\r\nimport useLocalStorage from '../useLocalStorage';\r\n\r\nconst HomePage = () => {\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Welcome</h1>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport useLocalStorage from '../useLocalStorage';\r\n\r\nconst Page1 = () => {\r\n  const [title, setTitle] = useLocalStorage('myValueInLocalStorage');\r\n\r\n  const onChange = event => setTitle(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 1</h1>\r\n      <input value={title} type=\"text\" onChange={onChange} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page1;\r\n","import React from 'react';\r\nimport useLocalStorage from '../useLocalStorage';\r\n\r\nconst Page2 = () => {\r\n  const [title, setTitle] = useLocalStorage('myValueInLocalStorage');\r\n\r\n  const onChange = event => setTitle(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 2</h1>\r\n      <input value={title} type=\"text\" onChange={onChange} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page2;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\n// import useLocalStorage from './useLocalStorage';\n\nimport HomePage from './pages/homepage';\nimport Page1 from './pages/page1';\nimport Page2 from './pages/page2';\n\n\nconst Menu = () => {\n\n   const s = useStyles();\n\n    return (\n      <div className={s.footer}>\n        <Link to=\"/\" className={s.links}>HomePage</Link>\n        <Link to=\"/page1\" className={s.links}>Page 1</Link>\n        <Link to=\"/page2\" className={s.links}>Page 1</Link>\n      </div>\n    );\n};\n\nconst App = () => {\n\n  return (\n\n    <Router>\n\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/page1\" component={Page1} />\n        <Route path=\"/page2\" component={Page2} />\n      </Switch>\n\n      <Menu/>\n\n    </Router>\n\n  );\n};\n\nconst useStyles = makeStyles({\n  body: {\n    padding: 15\n  },\n  footer: {\n    backgroundColor: 'gray',\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n    width: 100 + '%',\n    display: 'flex',\n    justifyContent: 'center',\n    padding: 50 + 'px'\n  },\n  links: {\n    color: 'white',\n    flexBasis: 50 + 'px' \n  }\n});\n\nexport default App;\n\n/*\n\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}