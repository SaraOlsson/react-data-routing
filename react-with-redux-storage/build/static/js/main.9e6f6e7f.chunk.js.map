{"version":3,"sources":["store.js","pages/homepage.js","pages/page1.js","components/usercomponent.js","pages/page2.js","pages/page3.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["defaultValues","data","title","combineReducers","testReducer","state","action","type","newArray","slice","splice","length","item","anotherReducer","signedIn","HomePage","href","Page1","useSelector","dispatch","useDispatch","value","onChange","event","target","UserComponent","props","name","age","useStyles","makeStyles","heading","backgroundColor","color","transform","padding","Page2","s","console","log","mapped_users","map","user","idx","key","className","to","Page3","React","useState","setName","setAge","placeholder","onClick","alert","footer","position","left","bottom","width","display","justifyContent","links","Menu","App","exact","path","component","Boolean","window","location","hostname","match","store","createStore","reducer","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e6f6e7f.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nlet defaultValues = { data: [], title: \"\" };\r\n\r\n// defines state and default values, and how it should be updated\r\nfunction testReducer(state = defaultValues, action) {\r\n  switch (action.type) {\r\n    case \"ADDUSER\":\r\n\r\n      // immutable update pattern..\r\n      let newArray = state.data.slice();\r\n      newArray.splice(newArray.length + 1, 0, action.item);\r\n\r\n      return {\r\n        ...state,\r\n        data: newArray\r\n      };\r\n    case \"SETTITLE\":\r\n      return {\r\n        ...state,\r\n        title: action.title\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// for bigger apps its convenient with separate reducers. Example:\r\nfunction anotherReducer(state = { signedIn: false }, action) {\r\n  switch (action.type) {\r\n    case \"SIGNIN\":\r\n      return {\r\n        ...state,\r\n        signedIn: true\r\n      };\r\n    case \"SIGNOUT\":\r\n      return {\r\n        ...state,\r\n        signedIn: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// combined reducers = nice when application grows\r\nexport default combineReducers({\r\n  testReducer: testReducer,\r\n  anotherReducer: anotherReducer\r\n});\r\n\r\n// or if not combined\r\n// export default testReducer\r\n","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <div>\r\n\r\n      <pre>{`\r\n            Welcome,\r\n\r\n            This sample app uses react-router-dom to navigate between pages\r\n            and react-redux with Hooks to handle data between components. Redux\r\n            is used in many real applications.\r\n\r\n            Navigation details:\r\n            See App.js for route definitions. The user is redirected with Link\r\n            components from the Menu component. Components corresponding to\r\n            whole pages are in the /pages folder and small components in the\r\n            /components folder and are imported where needed.\r\n\r\n            Redux details:\r\n            Changes to the create-react-app project follow the simple tutorial linked below.\r\n            You can keep your usual state hooks (e.g. const [name, setName] = React.useState('') )\r\n            as they are if they don't need to be reachable from other components. The basic concepts:\r\n            store.js contains definitions of global states and how they should be updated.\r\n            useDispatch is hook to change the state, see page1 and how the dispatch type and action\r\n            corresponds to the case \"SETTITLE\" and action object in store.js. Also see how dispatch\r\n            from page3 corresponds to the case \"ADDUSER\" in store.js.\r\n            useSelector is hook to access the state, see page2. The useSelector also subscribes\r\n            to the redux store, so the component will re-render if the state changes.\r\n\r\n\r\n            Other:\r\n            Functional components are used throughout the app\r\n            For style, the npm package @material-ui/core is used. Each component\r\n            has a style object created with makeStyles to keep the CSS straightforward\r\n\r\n          `}  <a href=\"https://github.com/SaraOlsson/react-data-routing/tree/master/react-with-redux-storage\">Source code on GitHub</a>\r\n              {`\\n            `}\r\n              <a href=\"https://reactgo.com/react-redux-hooks/\">React Redux hooks tutorial with examples</a>\r\n              {`\\n            `}\r\n              <a href=\"https://reactploj.netlify.com/\">Same project but with localStorage for data management</a></pre>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Page1 = () => {\r\n\r\n  // as the title value is actually reachable in this component from the\r\n  // input, a normal const [title, settitle] = React.useState('') could be\r\n  // used as well (like in page3) instead of getting the state from the store.\r\n  \r\n  const state = useSelector(state => state.testReducer);\r\n  const dispatch = useDispatch(); // be able to dispatch\r\n\r\n  const onChange = event  => {\r\n\r\n    // change global state\r\n    dispatch({\r\n      type: \"SETTITLE\",\r\n      title: event.target.value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 1</h1>\r\n      <p>Enter something, then have a look at page 2..</p>\r\n      <input value={state.title} type=\"text\" onChange={onChange} />\r\n      <p>value: {state.title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page1;\r\n","import React from 'react';\r\n\r\nconst UserComponent = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <h3>User: {props.name} - age: {props.age}</h3>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default UserComponent;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport UserComponent from '../components/usercomponent';\r\n\r\nconst Page2 = () => {\r\n\r\n  const s = useStyles();\r\n  const state = useSelector(state => state.testReducer); // subscribe to the redux store\r\n\r\n  console.log(state)\r\n\r\n  let mapped_users = state.data.map((user, idx) => <UserComponent name={user.name} key={idx} age={user.age} />);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 2</h1>\r\n\r\n      <span className={s.heading}>value set at page 1</span>\r\n      {state.title.length > 0 ? <p>{state.title}</p> : <Link to=\"/page1\"><p> go there and enter something! </p></Link> }\r\n\r\n      <span className={s.heading}> users added at page 3 </span>\r\n      {\r\n        state.data.length > 0 ? <div>{mapped_users}</div> : <Link to=\"/page3\"><p> go there and enter users! </p></Link>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  heading: {\r\n    backgroundColor: 'teal',\r\n    color: 'white',\r\n    transform: 'rotate(45deg)',\r\n    padding: '5px'\r\n  }\r\n});\r\n\r\nexport default Page2;\r\n","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst Page3 = () => {\r\n\r\n  const [name, setName] = React.useState('');\r\n  const [age, setAge] = React.useState('');\r\n\r\n  const onChangeName = event => setName(event.target.value);\r\n  const onChangeAge = event => setAge(event.target.value);\r\n\r\n  const dispatch = useDispatch(); // be able to dispatch\r\n\r\n  const onAdd = () => {\r\n\r\n      let new_item = {name: name, age: age};\r\n\r\n      // change global state\r\n      dispatch({\r\n        type: \"ADDUSER\",\r\n        item: new_item\r\n      })\r\n\r\n      alert(\"added user\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Page 3</h1>\r\n\r\n      <p>Enter user info, then have a look at page 2..</p>\r\n      <input value={name} placeholder=\"name\" type=\"text\" onChange={onChangeName} />\r\n      <input value={age} placeholder=\"age\" type=\"text\" onChange={onChangeAge} />\r\n      <button onClick={onAdd}>Add</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page3;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst Menu = () => {\r\n\r\n   const s = useStyles();\r\n\r\n    return (\r\n      <div className={s.footer}>\r\n        <Link to=\"/\" className={s.links}>Homepage</Link>\r\n        <Link to=\"/page1\" className={s.links}>Page 1</Link>\r\n        <Link to=\"/page2\" className={s.links}>Page 2</Link>\r\n        <Link to=\"/page3\" className={s.links}>Page 3</Link>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n\r\n  footer: {\r\n    backgroundColor: 'teal',\r\n    position: 'fixed',\r\n    left: 0,\r\n    bottom: 0,\r\n    width: 100 + '%',\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n    padding: 50 + 'px 0'\r\n  },\r\n  links: {\r\n    color: 'white'\r\n  }\r\n});\r\n\r\nexport default Menu;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\n// import our component\nimport HomePage from './pages/homepage';\nimport Page1 from './pages/page1';\nimport Page2 from './pages/page2';\nimport Page3 from './pages/page3';\nimport Menu from './components/menu';\n\n// main component of app is always one page (depending on url path) + Menu below\nconst App = () => {\n\n  return (\n\n    <Router>\n\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/page1\" component={Page1} />\n        <Route path=\"/page2\" component={Page2} />\n        <Route path=\"/page3\" component={Page3} />\n      </Switch>\n\n      <Menu/>\n\n    </Router>\n\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./store.js\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nconst store = createStore(reducer);\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}